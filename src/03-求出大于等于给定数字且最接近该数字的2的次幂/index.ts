export const solution = (num: number) => {
  // 避免数字本身就是 2 的次幂时转换出错
  // 比如 16 的二进制为 0001 0000 最高位 1 后全转为 1 得到的是 0001 1111
  // 这时候再加 1 得到的是 0010 0000 也就是 32
  // 显然并不正确，而先减 1 则可以避免该问题
  num--

  // js 的 number 是 64 位的 需要确保能够将最高位 1 后全部转为 1
  // 最极端的情况就是第 64 位为 1
  // 1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
  // 要保证将它后面的所有位都能转成 1 需要经过下面这样操作
  num |= num >>> 1
  num |= num >>> 2
  num |= num >>> 4
  num |= num >>> 8
  num |= num >>> 16
  num |= num >>> 32

  // 对于负数而言，大于等于它的且最接近它的 2 的次幂就是 2 的 0 次幂，也就是 1
  // 而正数的话则是最高位之后全变为 1 后再加 1
  return num < 0 ? 1 : num + 1
}
